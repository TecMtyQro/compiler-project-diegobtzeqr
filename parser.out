Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    COM_BLOCK
    NEW_LINE
    SPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> form
Rule 2     form -> definition
Rule 3     form -> expression
Rule 4     form -> definition definition
Rule 5     definition -> OPEN_PAR DEFINE ID body CLOSE_PAR
Rule 6     body -> expression
Rule 7     body -> definition
Rule 8     expression -> constant
Rule 9     expression -> if_expression
Rule 10    expression -> do_expression
Rule 11    expression -> cond_expression
Rule 12    expression -> operation
Rule 13    expression -> ID
Rule 14    expression -> read
Rule 15    expression -> display
Rule 16    expression -> cons
Rule 17    expression -> list_manip
Rule 18    if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR
Rule 19    if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
Rule 20    cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
Rule 21    cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
Rule 22    do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
Rule 23    do_condition -> OPEN_PAR ID constant operation CLOSE_PAR
Rule 24    operation -> OPEN_PAR symbol expression expression CLOSE_PAR
Rule 25    comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR
Rule 26    read -> OPEN_PAR READ CLOSE_PAR
Rule 27    display -> OPEN_PAR DISPLAY expression CLOSE_PAR
Rule 28    cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR
Rule 29    list_manip -> OPEN_PAR list_op list CLOSE_PAR
Rule 30    list_expression -> list
Rule 31    list_expression -> constant
Rule 32    list_op -> CDR
Rule 33    list_op -> CAR
Rule 34    list_op -> LAST
Rule 35    list -> cons
Rule 36    list -> EMPTY
Rule 37    list -> ID
Rule 38    symbol -> comparison
Rule 39    symbol -> boolean
Rule 40    symbol -> ADD
Rule 41    symbol -> MINUS
Rule 42    symbol -> DIVIDE
Rule 43    symbol -> MULTIPLY
Rule 44    symbol -> REMAINDER
Rule 45    boolean -> TRUE
Rule 46    boolean -> FALSE
Rule 47    comparison -> EQQUES
Rule 48    comparison -> NEQQUES
Rule 49    comparison -> EQUALS
Rule 50    comparison -> GREATER
Rule 51    comparison -> LESS
Rule 52    comparison -> GREATER_EQUAL
Rule 53    comparison -> LESS_EQUAL
Rule 54    constant -> INT
Rule 55    constant -> FLOAT
Rule 56    constant -> CHARACTER
Rule 57    constant -> STRING

Terminals, with rules where they appear

ADD                  : 40
CAR                  : 33
CDR                  : 32
CHARACTER            : 56
CLOSE_BRA            : 20 21 21
CLOSE_PAR            : 5 18 19 20 21 22 23 24 25 26 27 28 29
COMMENT              : 
COM_BLOCK            : 
COND                 : 20 21
CONS                 : 28
DEFINE               : 5
DISPLAY              : 27
DIVIDE               : 42
DO                   : 22
ELSE                 : 21
EMPTY                : 36
EQQUES               : 47
EQUALS               : 49
FALSE                : 46
FLOAT                : 55
GREATER              : 50
GREATER_EQUAL        : 52
ID                   : 5 13 23 37
IF                   : 18 19
INT                  : 54
LAST                 : 34
LESS                 : 51
LESS_EQUAL           : 53
MINUS                : 41
MULTIPLY             : 43
NEQQUES              : 48
NEW_LINE             : 
OPEN_BRA             : 20 21 21
OPEN_PAR             : 5 18 19 20 21 22 23 24 25 26 27 28 29
READ                 : 26
REMAINDER            : 44
SPACE                : 
STRING               : 57
TRUE                 : 45
error                : 

Nonterminals, with rules where they appear

body                 : 5
boolean              : 39
comparison           : 25 38
comparison_expression : 18 19 20 21 22
cond_expression      : 11
cons                 : 16 35
constant             : 8 23 28 31
definition           : 2 4 4 7
display              : 15
do_condition         : 22
do_expression        : 10
expression           : 3 6 18 19 19 20 21 21 22 24 24 25 25 27
form                 : 1
if_expression        : 9
list                 : 29 30
list_expression      : 28
list_manip           : 17
list_op              : 29
operation            : 12 23
program              : 0
read                 : 14
symbol               : 24

Parsing method: SLR

state 0

    (0) S' -> . program
    (1) program -> . form
    (2) form -> . definition
    (3) form -> . expression
    (4) form -> . definition definition
    (5) definition -> . OPEN_PAR DEFINE ID body CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    OPEN_PAR        shift and go to state 5
    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19

    program                        shift and go to state 1
    form                           shift and go to state 2
    definition                     shift and go to state 3
    expression                     shift and go to state 4
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> form .

    $end            reduce using rule 1 (program -> form .)


state 3

    (2) form -> definition .
    (4) form -> definition . definition
    (5) definition -> . OPEN_PAR DEFINE ID body CLOSE_PAR

    $end            reduce using rule 2 (form -> definition .)
    OPEN_PAR        shift and go to state 21

    definition                     shift and go to state 20

state 4

    (3) form -> expression .

    $end            reduce using rule 3 (form -> expression .)


state 5

    (5) definition -> OPEN_PAR . DEFINE ID body CLOSE_PAR
    (18) if_expression -> OPEN_PAR . IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> OPEN_PAR . IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> OPEN_PAR . DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> OPEN_PAR . COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR . COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> OPEN_PAR . symbol expression expression CLOSE_PAR
    (26) read -> OPEN_PAR . READ CLOSE_PAR
    (27) display -> OPEN_PAR . DISPLAY expression CLOSE_PAR
    (28) cons -> OPEN_PAR . CONS constant list_expression CLOSE_PAR
    (29) list_manip -> OPEN_PAR . list_op list CLOSE_PAR
    (38) symbol -> . comparison
    (39) symbol -> . boolean
    (40) symbol -> . ADD
    (41) symbol -> . MINUS
    (42) symbol -> . DIVIDE
    (43) symbol -> . MULTIPLY
    (44) symbol -> . REMAINDER
    (32) list_op -> . CDR
    (33) list_op -> . CAR
    (34) list_op -> . LAST
    (47) comparison -> . EQQUES
    (48) comparison -> . NEQQUES
    (49) comparison -> . EQUALS
    (50) comparison -> . GREATER
    (51) comparison -> . LESS
    (52) comparison -> . GREATER_EQUAL
    (53) comparison -> . LESS_EQUAL
    (45) boolean -> . TRUE
    (46) boolean -> . FALSE

    DEFINE          shift and go to state 22
    IF              shift and go to state 23
    DO              shift and go to state 24
    COND            shift and go to state 25
    READ            shift and go to state 27
    DISPLAY         shift and go to state 28
    CONS            shift and go to state 29
    ADD             shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    MULTIPLY        shift and go to state 36
    REMAINDER       shift and go to state 37
    CDR             shift and go to state 38
    CAR             shift and go to state 39
    LAST            shift and go to state 40
    EQQUES          shift and go to state 41
    NEQQUES         shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER         shift and go to state 44
    LESS            shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    symbol                         shift and go to state 26
    list_op                        shift and go to state 30
    comparison                     shift and go to state 31
    boolean                        shift and go to state 32

state 6

    (13) expression -> ID .

    $end            reduce using rule 13 (expression -> ID .)
    CLOSE_PAR       reduce using rule 13 (expression -> ID .)
    ID              reduce using rule 13 (expression -> ID .)
    INT             reduce using rule 13 (expression -> ID .)
    FLOAT           reduce using rule 13 (expression -> ID .)
    CHARACTER       reduce using rule 13 (expression -> ID .)
    STRING          reduce using rule 13 (expression -> ID .)
    OPEN_PAR        reduce using rule 13 (expression -> ID .)
    CLOSE_BRA       reduce using rule 13 (expression -> ID .)


state 7

    (8) expression -> constant .

    $end            reduce using rule 8 (expression -> constant .)
    CLOSE_PAR       reduce using rule 8 (expression -> constant .)
    ID              reduce using rule 8 (expression -> constant .)
    INT             reduce using rule 8 (expression -> constant .)
    FLOAT           reduce using rule 8 (expression -> constant .)
    CHARACTER       reduce using rule 8 (expression -> constant .)
    STRING          reduce using rule 8 (expression -> constant .)
    OPEN_PAR        reduce using rule 8 (expression -> constant .)
    CLOSE_BRA       reduce using rule 8 (expression -> constant .)


state 8

    (9) expression -> if_expression .

    $end            reduce using rule 9 (expression -> if_expression .)
    CLOSE_PAR       reduce using rule 9 (expression -> if_expression .)
    ID              reduce using rule 9 (expression -> if_expression .)
    INT             reduce using rule 9 (expression -> if_expression .)
    FLOAT           reduce using rule 9 (expression -> if_expression .)
    CHARACTER       reduce using rule 9 (expression -> if_expression .)
    STRING          reduce using rule 9 (expression -> if_expression .)
    OPEN_PAR        reduce using rule 9 (expression -> if_expression .)
    CLOSE_BRA       reduce using rule 9 (expression -> if_expression .)


state 9

    (10) expression -> do_expression .

    $end            reduce using rule 10 (expression -> do_expression .)
    CLOSE_PAR       reduce using rule 10 (expression -> do_expression .)
    ID              reduce using rule 10 (expression -> do_expression .)
    INT             reduce using rule 10 (expression -> do_expression .)
    FLOAT           reduce using rule 10 (expression -> do_expression .)
    CHARACTER       reduce using rule 10 (expression -> do_expression .)
    STRING          reduce using rule 10 (expression -> do_expression .)
    OPEN_PAR        reduce using rule 10 (expression -> do_expression .)
    CLOSE_BRA       reduce using rule 10 (expression -> do_expression .)


state 10

    (11) expression -> cond_expression .

    $end            reduce using rule 11 (expression -> cond_expression .)
    CLOSE_PAR       reduce using rule 11 (expression -> cond_expression .)
    ID              reduce using rule 11 (expression -> cond_expression .)
    INT             reduce using rule 11 (expression -> cond_expression .)
    FLOAT           reduce using rule 11 (expression -> cond_expression .)
    CHARACTER       reduce using rule 11 (expression -> cond_expression .)
    STRING          reduce using rule 11 (expression -> cond_expression .)
    OPEN_PAR        reduce using rule 11 (expression -> cond_expression .)
    CLOSE_BRA       reduce using rule 11 (expression -> cond_expression .)


state 11

    (12) expression -> operation .

    $end            reduce using rule 12 (expression -> operation .)
    CLOSE_PAR       reduce using rule 12 (expression -> operation .)
    ID              reduce using rule 12 (expression -> operation .)
    INT             reduce using rule 12 (expression -> operation .)
    FLOAT           reduce using rule 12 (expression -> operation .)
    CHARACTER       reduce using rule 12 (expression -> operation .)
    STRING          reduce using rule 12 (expression -> operation .)
    OPEN_PAR        reduce using rule 12 (expression -> operation .)
    CLOSE_BRA       reduce using rule 12 (expression -> operation .)


state 12

    (14) expression -> read .

    $end            reduce using rule 14 (expression -> read .)
    CLOSE_PAR       reduce using rule 14 (expression -> read .)
    ID              reduce using rule 14 (expression -> read .)
    INT             reduce using rule 14 (expression -> read .)
    FLOAT           reduce using rule 14 (expression -> read .)
    CHARACTER       reduce using rule 14 (expression -> read .)
    STRING          reduce using rule 14 (expression -> read .)
    OPEN_PAR        reduce using rule 14 (expression -> read .)
    CLOSE_BRA       reduce using rule 14 (expression -> read .)


state 13

    (15) expression -> display .

    $end            reduce using rule 15 (expression -> display .)
    CLOSE_PAR       reduce using rule 15 (expression -> display .)
    ID              reduce using rule 15 (expression -> display .)
    INT             reduce using rule 15 (expression -> display .)
    FLOAT           reduce using rule 15 (expression -> display .)
    CHARACTER       reduce using rule 15 (expression -> display .)
    STRING          reduce using rule 15 (expression -> display .)
    OPEN_PAR        reduce using rule 15 (expression -> display .)
    CLOSE_BRA       reduce using rule 15 (expression -> display .)


state 14

    (16) expression -> cons .

    $end            reduce using rule 16 (expression -> cons .)
    CLOSE_PAR       reduce using rule 16 (expression -> cons .)
    ID              reduce using rule 16 (expression -> cons .)
    INT             reduce using rule 16 (expression -> cons .)
    FLOAT           reduce using rule 16 (expression -> cons .)
    CHARACTER       reduce using rule 16 (expression -> cons .)
    STRING          reduce using rule 16 (expression -> cons .)
    OPEN_PAR        reduce using rule 16 (expression -> cons .)
    CLOSE_BRA       reduce using rule 16 (expression -> cons .)


state 15

    (17) expression -> list_manip .

    $end            reduce using rule 17 (expression -> list_manip .)
    CLOSE_PAR       reduce using rule 17 (expression -> list_manip .)
    ID              reduce using rule 17 (expression -> list_manip .)
    INT             reduce using rule 17 (expression -> list_manip .)
    FLOAT           reduce using rule 17 (expression -> list_manip .)
    CHARACTER       reduce using rule 17 (expression -> list_manip .)
    STRING          reduce using rule 17 (expression -> list_manip .)
    OPEN_PAR        reduce using rule 17 (expression -> list_manip .)
    CLOSE_BRA       reduce using rule 17 (expression -> list_manip .)


state 16

    (54) constant -> INT .

    $end            reduce using rule 54 (constant -> INT .)
    CLOSE_PAR       reduce using rule 54 (constant -> INT .)
    OPEN_PAR        reduce using rule 54 (constant -> INT .)
    INT             reduce using rule 54 (constant -> INT .)
    FLOAT           reduce using rule 54 (constant -> INT .)
    CHARACTER       reduce using rule 54 (constant -> INT .)
    STRING          reduce using rule 54 (constant -> INT .)
    EMPTY           reduce using rule 54 (constant -> INT .)
    ID              reduce using rule 54 (constant -> INT .)
    CLOSE_BRA       reduce using rule 54 (constant -> INT .)


state 17

    (55) constant -> FLOAT .

    $end            reduce using rule 55 (constant -> FLOAT .)
    CLOSE_PAR       reduce using rule 55 (constant -> FLOAT .)
    OPEN_PAR        reduce using rule 55 (constant -> FLOAT .)
    INT             reduce using rule 55 (constant -> FLOAT .)
    FLOAT           reduce using rule 55 (constant -> FLOAT .)
    CHARACTER       reduce using rule 55 (constant -> FLOAT .)
    STRING          reduce using rule 55 (constant -> FLOAT .)
    EMPTY           reduce using rule 55 (constant -> FLOAT .)
    ID              reduce using rule 55 (constant -> FLOAT .)
    CLOSE_BRA       reduce using rule 55 (constant -> FLOAT .)


state 18

    (56) constant -> CHARACTER .

    $end            reduce using rule 56 (constant -> CHARACTER .)
    CLOSE_PAR       reduce using rule 56 (constant -> CHARACTER .)
    OPEN_PAR        reduce using rule 56 (constant -> CHARACTER .)
    INT             reduce using rule 56 (constant -> CHARACTER .)
    FLOAT           reduce using rule 56 (constant -> CHARACTER .)
    CHARACTER       reduce using rule 56 (constant -> CHARACTER .)
    STRING          reduce using rule 56 (constant -> CHARACTER .)
    EMPTY           reduce using rule 56 (constant -> CHARACTER .)
    ID              reduce using rule 56 (constant -> CHARACTER .)
    CLOSE_BRA       reduce using rule 56 (constant -> CHARACTER .)


state 19

    (57) constant -> STRING .

    $end            reduce using rule 57 (constant -> STRING .)
    CLOSE_PAR       reduce using rule 57 (constant -> STRING .)
    OPEN_PAR        reduce using rule 57 (constant -> STRING .)
    INT             reduce using rule 57 (constant -> STRING .)
    FLOAT           reduce using rule 57 (constant -> STRING .)
    CHARACTER       reduce using rule 57 (constant -> STRING .)
    STRING          reduce using rule 57 (constant -> STRING .)
    EMPTY           reduce using rule 57 (constant -> STRING .)
    ID              reduce using rule 57 (constant -> STRING .)
    CLOSE_BRA       reduce using rule 57 (constant -> STRING .)


state 20

    (4) form -> definition definition .

    $end            reduce using rule 4 (form -> definition definition .)


state 21

    (5) definition -> OPEN_PAR . DEFINE ID body CLOSE_PAR

    DEFINE          shift and go to state 22


state 22

    (5) definition -> OPEN_PAR DEFINE . ID body CLOSE_PAR

    ID              shift and go to state 50


state 23

    (18) if_expression -> OPEN_PAR IF . comparison_expression expression CLOSE_PAR
    (19) if_expression -> OPEN_PAR IF . comparison_expression expression expression CLOSE_PAR
    (25) comparison_expression -> . OPEN_PAR comparison expression expression CLOSE_PAR

    OPEN_PAR        shift and go to state 51

    comparison_expression          shift and go to state 52

state 24

    (22) do_expression -> OPEN_PAR DO . do_condition comparison_expression expression CLOSE_PAR
    (23) do_condition -> . OPEN_PAR ID constant operation CLOSE_PAR

    OPEN_PAR        shift and go to state 53

    do_condition                   shift and go to state 54

state 25

    (20) cond_expression -> OPEN_PAR COND . OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR COND . OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR

    OPEN_BRA        shift and go to state 55


state 26

    (24) operation -> OPEN_PAR symbol . expression expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 57
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 27

    (26) read -> OPEN_PAR READ . CLOSE_PAR

    CLOSE_PAR       shift and go to state 58


state 28

    (27) display -> OPEN_PAR DISPLAY . expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 59
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 29

    (28) cons -> OPEN_PAR CONS . constant list_expression CLOSE_PAR
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19

    constant                       shift and go to state 60

state 30

    (29) list_manip -> OPEN_PAR list_op . list CLOSE_PAR
    (35) list -> . cons
    (36) list -> . EMPTY
    (37) list -> . ID
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR

    EMPTY           shift and go to state 64
    ID              shift and go to state 65
    OPEN_PAR        shift and go to state 61

    list                           shift and go to state 62
    cons                           shift and go to state 63

state 31

    (38) symbol -> comparison .

    ID              reduce using rule 38 (symbol -> comparison .)
    INT             reduce using rule 38 (symbol -> comparison .)
    FLOAT           reduce using rule 38 (symbol -> comparison .)
    CHARACTER       reduce using rule 38 (symbol -> comparison .)
    STRING          reduce using rule 38 (symbol -> comparison .)
    OPEN_PAR        reduce using rule 38 (symbol -> comparison .)


state 32

    (39) symbol -> boolean .

    ID              reduce using rule 39 (symbol -> boolean .)
    INT             reduce using rule 39 (symbol -> boolean .)
    FLOAT           reduce using rule 39 (symbol -> boolean .)
    CHARACTER       reduce using rule 39 (symbol -> boolean .)
    STRING          reduce using rule 39 (symbol -> boolean .)
    OPEN_PAR        reduce using rule 39 (symbol -> boolean .)


state 33

    (40) symbol -> ADD .

    ID              reduce using rule 40 (symbol -> ADD .)
    INT             reduce using rule 40 (symbol -> ADD .)
    FLOAT           reduce using rule 40 (symbol -> ADD .)
    CHARACTER       reduce using rule 40 (symbol -> ADD .)
    STRING          reduce using rule 40 (symbol -> ADD .)
    OPEN_PAR        reduce using rule 40 (symbol -> ADD .)


state 34

    (41) symbol -> MINUS .

    ID              reduce using rule 41 (symbol -> MINUS .)
    INT             reduce using rule 41 (symbol -> MINUS .)
    FLOAT           reduce using rule 41 (symbol -> MINUS .)
    CHARACTER       reduce using rule 41 (symbol -> MINUS .)
    STRING          reduce using rule 41 (symbol -> MINUS .)
    OPEN_PAR        reduce using rule 41 (symbol -> MINUS .)


state 35

    (42) symbol -> DIVIDE .

    ID              reduce using rule 42 (symbol -> DIVIDE .)
    INT             reduce using rule 42 (symbol -> DIVIDE .)
    FLOAT           reduce using rule 42 (symbol -> DIVIDE .)
    CHARACTER       reduce using rule 42 (symbol -> DIVIDE .)
    STRING          reduce using rule 42 (symbol -> DIVIDE .)
    OPEN_PAR        reduce using rule 42 (symbol -> DIVIDE .)


state 36

    (43) symbol -> MULTIPLY .

    ID              reduce using rule 43 (symbol -> MULTIPLY .)
    INT             reduce using rule 43 (symbol -> MULTIPLY .)
    FLOAT           reduce using rule 43 (symbol -> MULTIPLY .)
    CHARACTER       reduce using rule 43 (symbol -> MULTIPLY .)
    STRING          reduce using rule 43 (symbol -> MULTIPLY .)
    OPEN_PAR        reduce using rule 43 (symbol -> MULTIPLY .)


state 37

    (44) symbol -> REMAINDER .

    ID              reduce using rule 44 (symbol -> REMAINDER .)
    INT             reduce using rule 44 (symbol -> REMAINDER .)
    FLOAT           reduce using rule 44 (symbol -> REMAINDER .)
    CHARACTER       reduce using rule 44 (symbol -> REMAINDER .)
    STRING          reduce using rule 44 (symbol -> REMAINDER .)
    OPEN_PAR        reduce using rule 44 (symbol -> REMAINDER .)


state 38

    (32) list_op -> CDR .

    OPEN_PAR        reduce using rule 32 (list_op -> CDR .)
    EMPTY           reduce using rule 32 (list_op -> CDR .)
    ID              reduce using rule 32 (list_op -> CDR .)


state 39

    (33) list_op -> CAR .

    OPEN_PAR        reduce using rule 33 (list_op -> CAR .)
    EMPTY           reduce using rule 33 (list_op -> CAR .)
    ID              reduce using rule 33 (list_op -> CAR .)


state 40

    (34) list_op -> LAST .

    OPEN_PAR        reduce using rule 34 (list_op -> LAST .)
    EMPTY           reduce using rule 34 (list_op -> LAST .)
    ID              reduce using rule 34 (list_op -> LAST .)


state 41

    (47) comparison -> EQQUES .

    ID              reduce using rule 47 (comparison -> EQQUES .)
    INT             reduce using rule 47 (comparison -> EQQUES .)
    FLOAT           reduce using rule 47 (comparison -> EQQUES .)
    CHARACTER       reduce using rule 47 (comparison -> EQQUES .)
    STRING          reduce using rule 47 (comparison -> EQQUES .)
    OPEN_PAR        reduce using rule 47 (comparison -> EQQUES .)


state 42

    (48) comparison -> NEQQUES .

    ID              reduce using rule 48 (comparison -> NEQQUES .)
    INT             reduce using rule 48 (comparison -> NEQQUES .)
    FLOAT           reduce using rule 48 (comparison -> NEQQUES .)
    CHARACTER       reduce using rule 48 (comparison -> NEQQUES .)
    STRING          reduce using rule 48 (comparison -> NEQQUES .)
    OPEN_PAR        reduce using rule 48 (comparison -> NEQQUES .)


state 43

    (49) comparison -> EQUALS .

    ID              reduce using rule 49 (comparison -> EQUALS .)
    INT             reduce using rule 49 (comparison -> EQUALS .)
    FLOAT           reduce using rule 49 (comparison -> EQUALS .)
    CHARACTER       reduce using rule 49 (comparison -> EQUALS .)
    STRING          reduce using rule 49 (comparison -> EQUALS .)
    OPEN_PAR        reduce using rule 49 (comparison -> EQUALS .)


state 44

    (50) comparison -> GREATER .

    ID              reduce using rule 50 (comparison -> GREATER .)
    INT             reduce using rule 50 (comparison -> GREATER .)
    FLOAT           reduce using rule 50 (comparison -> GREATER .)
    CHARACTER       reduce using rule 50 (comparison -> GREATER .)
    STRING          reduce using rule 50 (comparison -> GREATER .)
    OPEN_PAR        reduce using rule 50 (comparison -> GREATER .)


state 45

    (51) comparison -> LESS .

    ID              reduce using rule 51 (comparison -> LESS .)
    INT             reduce using rule 51 (comparison -> LESS .)
    FLOAT           reduce using rule 51 (comparison -> LESS .)
    CHARACTER       reduce using rule 51 (comparison -> LESS .)
    STRING          reduce using rule 51 (comparison -> LESS .)
    OPEN_PAR        reduce using rule 51 (comparison -> LESS .)


state 46

    (52) comparison -> GREATER_EQUAL .

    ID              reduce using rule 52 (comparison -> GREATER_EQUAL .)
    INT             reduce using rule 52 (comparison -> GREATER_EQUAL .)
    FLOAT           reduce using rule 52 (comparison -> GREATER_EQUAL .)
    CHARACTER       reduce using rule 52 (comparison -> GREATER_EQUAL .)
    STRING          reduce using rule 52 (comparison -> GREATER_EQUAL .)
    OPEN_PAR        reduce using rule 52 (comparison -> GREATER_EQUAL .)


state 47

    (53) comparison -> LESS_EQUAL .

    ID              reduce using rule 53 (comparison -> LESS_EQUAL .)
    INT             reduce using rule 53 (comparison -> LESS_EQUAL .)
    FLOAT           reduce using rule 53 (comparison -> LESS_EQUAL .)
    CHARACTER       reduce using rule 53 (comparison -> LESS_EQUAL .)
    STRING          reduce using rule 53 (comparison -> LESS_EQUAL .)
    OPEN_PAR        reduce using rule 53 (comparison -> LESS_EQUAL .)


state 48

    (45) boolean -> TRUE .

    ID              reduce using rule 45 (boolean -> TRUE .)
    INT             reduce using rule 45 (boolean -> TRUE .)
    FLOAT           reduce using rule 45 (boolean -> TRUE .)
    CHARACTER       reduce using rule 45 (boolean -> TRUE .)
    STRING          reduce using rule 45 (boolean -> TRUE .)
    OPEN_PAR        reduce using rule 45 (boolean -> TRUE .)


state 49

    (46) boolean -> FALSE .

    ID              reduce using rule 46 (boolean -> FALSE .)
    INT             reduce using rule 46 (boolean -> FALSE .)
    FLOAT           reduce using rule 46 (boolean -> FALSE .)
    CHARACTER       reduce using rule 46 (boolean -> FALSE .)
    STRING          reduce using rule 46 (boolean -> FALSE .)
    OPEN_PAR        reduce using rule 46 (boolean -> FALSE .)


state 50

    (5) definition -> OPEN_PAR DEFINE ID . body CLOSE_PAR
    (6) body -> . expression
    (7) body -> . definition
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (5) definition -> . OPEN_PAR DEFINE ID body CLOSE_PAR
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    OPEN_PAR        shift and go to state 5
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19

    body                           shift and go to state 66
    expression                     shift and go to state 67
    definition                     shift and go to state 68
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 51

    (25) comparison_expression -> OPEN_PAR . comparison expression expression CLOSE_PAR
    (47) comparison -> . EQQUES
    (48) comparison -> . NEQQUES
    (49) comparison -> . EQUALS
    (50) comparison -> . GREATER
    (51) comparison -> . LESS
    (52) comparison -> . GREATER_EQUAL
    (53) comparison -> . LESS_EQUAL

    EQQUES          shift and go to state 41
    NEQQUES         shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER         shift and go to state 44
    LESS            shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47

    comparison                     shift and go to state 69

state 52

    (18) if_expression -> OPEN_PAR IF comparison_expression . expression CLOSE_PAR
    (19) if_expression -> OPEN_PAR IF comparison_expression . expression expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 70
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 53

    (23) do_condition -> OPEN_PAR . ID constant operation CLOSE_PAR

    ID              shift and go to state 71


state 54

    (22) do_expression -> OPEN_PAR DO do_condition . comparison_expression expression CLOSE_PAR
    (25) comparison_expression -> . OPEN_PAR comparison expression expression CLOSE_PAR

    OPEN_PAR        shift and go to state 51

    comparison_expression          shift and go to state 72

state 55

    (20) cond_expression -> OPEN_PAR COND OPEN_BRA . comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR COND OPEN_BRA . comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (25) comparison_expression -> . OPEN_PAR comparison expression expression CLOSE_PAR

    OPEN_PAR        shift and go to state 51

    comparison_expression          shift and go to state 73

state 56

    (18) if_expression -> OPEN_PAR . IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> OPEN_PAR . IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> OPEN_PAR . DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> OPEN_PAR . COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR . COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> OPEN_PAR . symbol expression expression CLOSE_PAR
    (26) read -> OPEN_PAR . READ CLOSE_PAR
    (27) display -> OPEN_PAR . DISPLAY expression CLOSE_PAR
    (28) cons -> OPEN_PAR . CONS constant list_expression CLOSE_PAR
    (29) list_manip -> OPEN_PAR . list_op list CLOSE_PAR
    (38) symbol -> . comparison
    (39) symbol -> . boolean
    (40) symbol -> . ADD
    (41) symbol -> . MINUS
    (42) symbol -> . DIVIDE
    (43) symbol -> . MULTIPLY
    (44) symbol -> . REMAINDER
    (32) list_op -> . CDR
    (33) list_op -> . CAR
    (34) list_op -> . LAST
    (47) comparison -> . EQQUES
    (48) comparison -> . NEQQUES
    (49) comparison -> . EQUALS
    (50) comparison -> . GREATER
    (51) comparison -> . LESS
    (52) comparison -> . GREATER_EQUAL
    (53) comparison -> . LESS_EQUAL
    (45) boolean -> . TRUE
    (46) boolean -> . FALSE

    IF              shift and go to state 23
    DO              shift and go to state 24
    COND            shift and go to state 25
    READ            shift and go to state 27
    DISPLAY         shift and go to state 28
    CONS            shift and go to state 29
    ADD             shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    MULTIPLY        shift and go to state 36
    REMAINDER       shift and go to state 37
    CDR             shift and go to state 38
    CAR             shift and go to state 39
    LAST            shift and go to state 40
    EQQUES          shift and go to state 41
    NEQQUES         shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER         shift and go to state 44
    LESS            shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    symbol                         shift and go to state 26
    list_op                        shift and go to state 30
    comparison                     shift and go to state 31
    boolean                        shift and go to state 32

state 57

    (24) operation -> OPEN_PAR symbol expression . expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 74
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 58

    (26) read -> OPEN_PAR READ CLOSE_PAR .

    $end            reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    ID              reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    INT             reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    FLOAT           reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    CHARACTER       reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    STRING          reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    OPEN_PAR        reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 26 (read -> OPEN_PAR READ CLOSE_PAR .)


state 59

    (27) display -> OPEN_PAR DISPLAY expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 75


state 60

    (28) cons -> OPEN_PAR CONS constant . list_expression CLOSE_PAR
    (30) list_expression -> . list
    (31) list_expression -> . constant
    (35) list -> . cons
    (36) list -> . EMPTY
    (37) list -> . ID
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR

    EMPTY           shift and go to state 64
    ID              shift and go to state 65
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 61

    constant                       shift and go to state 76
    list_expression                shift and go to state 77
    list                           shift and go to state 78
    cons                           shift and go to state 63

state 61

    (28) cons -> OPEN_PAR . CONS constant list_expression CLOSE_PAR

    CONS            shift and go to state 29


state 62

    (29) list_manip -> OPEN_PAR list_op list . CLOSE_PAR

    CLOSE_PAR       shift and go to state 79


state 63

    (35) list -> cons .

    CLOSE_PAR       reduce using rule 35 (list -> cons .)


state 64

    (36) list -> EMPTY .

    CLOSE_PAR       reduce using rule 36 (list -> EMPTY .)


state 65

    (37) list -> ID .

    CLOSE_PAR       reduce using rule 37 (list -> ID .)


state 66

    (5) definition -> OPEN_PAR DEFINE ID body . CLOSE_PAR

    CLOSE_PAR       shift and go to state 80


state 67

    (6) body -> expression .

    CLOSE_PAR       reduce using rule 6 (body -> expression .)


state 68

    (7) body -> definition .

    CLOSE_PAR       reduce using rule 7 (body -> definition .)


state 69

    (25) comparison_expression -> OPEN_PAR comparison . expression expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 81
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 70

    (18) if_expression -> OPEN_PAR IF comparison_expression expression . CLOSE_PAR
    (19) if_expression -> OPEN_PAR IF comparison_expression expression . expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    CLOSE_PAR       shift and go to state 83
    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 82
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 71

    (23) do_condition -> OPEN_PAR ID . constant operation CLOSE_PAR
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19

    constant                       shift and go to state 84

state 72

    (22) do_expression -> OPEN_PAR DO do_condition comparison_expression . expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 85
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 73

    (20) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression . expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression . expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 86
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 74

    (24) operation -> OPEN_PAR symbol expression expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 87


state 75

    (27) display -> OPEN_PAR DISPLAY expression CLOSE_PAR .

    $end            reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    ID              reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    INT             reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    FLOAT           reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    CHARACTER       reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    STRING          reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 27 (display -> OPEN_PAR DISPLAY expression CLOSE_PAR .)


state 76

    (31) list_expression -> constant .

    CLOSE_PAR       reduce using rule 31 (list_expression -> constant .)


state 77

    (28) cons -> OPEN_PAR CONS constant list_expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 88


state 78

    (30) list_expression -> list .

    CLOSE_PAR       reduce using rule 30 (list_expression -> list .)


state 79

    (29) list_manip -> OPEN_PAR list_op list CLOSE_PAR .

    $end            reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    ID              reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    INT             reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    FLOAT           reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    CHARACTER       reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    STRING          reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    OPEN_PAR        reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 29 (list_manip -> OPEN_PAR list_op list CLOSE_PAR .)


state 80

    (5) definition -> OPEN_PAR DEFINE ID body CLOSE_PAR .

    $end            reduce using rule 5 (definition -> OPEN_PAR DEFINE ID body CLOSE_PAR .)
    OPEN_PAR        reduce using rule 5 (definition -> OPEN_PAR DEFINE ID body CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 5 (definition -> OPEN_PAR DEFINE ID body CLOSE_PAR .)


state 81

    (25) comparison_expression -> OPEN_PAR comparison expression . expression CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 89
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 82

    (19) if_expression -> OPEN_PAR IF comparison_expression expression expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 90


state 83

    (18) if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .

    $end            reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    ID              reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    INT             reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    FLOAT           reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    CHARACTER       reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    STRING          reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 18 (if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR .)


state 84

    (23) do_condition -> OPEN_PAR ID constant . operation CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR

    OPEN_PAR        shift and go to state 91

    operation                      shift and go to state 92

state 85

    (22) do_expression -> OPEN_PAR DO do_condition comparison_expression expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 93


state 86

    (20) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression . CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression . CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR

    CLOSE_BRA       shift and go to state 94


state 87

    (24) operation -> OPEN_PAR symbol expression expression CLOSE_PAR .

    $end            reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    ID              reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    INT             reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    FLOAT           reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    CHARACTER       reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    STRING          reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 24 (operation -> OPEN_PAR symbol expression expression CLOSE_PAR .)


state 88

    (28) cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .

    $end            reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    ID              reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    INT             reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    FLOAT           reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    CHARACTER       reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    STRING          reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 28 (cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR .)


state 89

    (25) comparison_expression -> OPEN_PAR comparison expression expression . CLOSE_PAR

    CLOSE_PAR       shift and go to state 95


state 90

    (19) if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .

    $end            reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    ID              reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    INT             reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    FLOAT           reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    CHARACTER       reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    STRING          reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 19 (if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR .)


state 91

    (24) operation -> OPEN_PAR . symbol expression expression CLOSE_PAR
    (38) symbol -> . comparison
    (39) symbol -> . boolean
    (40) symbol -> . ADD
    (41) symbol -> . MINUS
    (42) symbol -> . DIVIDE
    (43) symbol -> . MULTIPLY
    (44) symbol -> . REMAINDER
    (47) comparison -> . EQQUES
    (48) comparison -> . NEQQUES
    (49) comparison -> . EQUALS
    (50) comparison -> . GREATER
    (51) comparison -> . LESS
    (52) comparison -> . GREATER_EQUAL
    (53) comparison -> . LESS_EQUAL
    (45) boolean -> . TRUE
    (46) boolean -> . FALSE

    ADD             shift and go to state 33
    MINUS           shift and go to state 34
    DIVIDE          shift and go to state 35
    MULTIPLY        shift and go to state 36
    REMAINDER       shift and go to state 37
    EQQUES          shift and go to state 41
    NEQQUES         shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER         shift and go to state 44
    LESS            shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    symbol                         shift and go to state 26
    comparison                     shift and go to state 31
    boolean                        shift and go to state 32

state 92

    (23) do_condition -> OPEN_PAR ID constant operation . CLOSE_PAR

    CLOSE_PAR       shift and go to state 96


state 93

    (22) do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .

    $end            reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    ID              reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    INT             reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    FLOAT           reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    CHARACTER       reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    STRING          reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 22 (do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR .)


state 94

    (20) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA . CLOSE_PAR
    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA . OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR

    CLOSE_PAR       shift and go to state 98
    OPEN_BRA        shift and go to state 97


state 95

    (25) comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .

    ID              reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)
    INT             reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)
    FLOAT           reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)
    CHARACTER       reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)
    STRING          reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)
    OPEN_PAR        reduce using rule 25 (comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR .)


state 96

    (23) do_condition -> OPEN_PAR ID constant operation CLOSE_PAR .

    OPEN_PAR        reduce using rule 23 (do_condition -> OPEN_PAR ID constant operation CLOSE_PAR .)


state 97

    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA . ELSE expression CLOSE_BRA CLOSE_PAR

    ELSE            shift and go to state 99


state 98

    (20) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .

    $end            reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    ID              reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    INT             reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    FLOAT           reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    CHARACTER       reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    STRING          reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    OPEN_PAR        reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 20 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR .)


state 99

    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE . expression CLOSE_BRA CLOSE_PAR
    (8) expression -> . constant
    (9) expression -> . if_expression
    (10) expression -> . do_expression
    (11) expression -> . cond_expression
    (12) expression -> . operation
    (13) expression -> . ID
    (14) expression -> . read
    (15) expression -> . display
    (16) expression -> . cons
    (17) expression -> . list_manip
    (54) constant -> . INT
    (55) constant -> . FLOAT
    (56) constant -> . CHARACTER
    (57) constant -> . STRING
    (18) if_expression -> . OPEN_PAR IF comparison_expression expression CLOSE_PAR
    (19) if_expression -> . OPEN_PAR IF comparison_expression expression expression CLOSE_PAR
    (22) do_expression -> . OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR
    (20) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR
    (21) cond_expression -> . OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR
    (24) operation -> . OPEN_PAR symbol expression expression CLOSE_PAR
    (26) read -> . OPEN_PAR READ CLOSE_PAR
    (27) display -> . OPEN_PAR DISPLAY expression CLOSE_PAR
    (28) cons -> . OPEN_PAR CONS constant list_expression CLOSE_PAR
    (29) list_manip -> . OPEN_PAR list_op list CLOSE_PAR

    ID              shift and go to state 6
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHARACTER       shift and go to state 18
    STRING          shift and go to state 19
    OPEN_PAR        shift and go to state 56

    expression                     shift and go to state 100
    constant                       shift and go to state 7
    if_expression                  shift and go to state 8
    do_expression                  shift and go to state 9
    cond_expression                shift and go to state 10
    operation                      shift and go to state 11
    read                           shift and go to state 12
    display                        shift and go to state 13
    cons                           shift and go to state 14
    list_manip                     shift and go to state 15

state 100

    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression . CLOSE_BRA CLOSE_PAR

    CLOSE_BRA       shift and go to state 101


state 101

    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA . CLOSE_PAR

    CLOSE_PAR       shift and go to state 102


state 102

    (21) cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .

    $end            reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    ID              reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    INT             reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    FLOAT           reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    CHARACTER       reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    STRING          reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    OPEN_PAR        reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)
    CLOSE_BRA       reduce using rule 21 (cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR .)


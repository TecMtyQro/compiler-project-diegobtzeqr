
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'SLR'

_lr_signature = 'ADD CAR CDR CHARACTER CLOSE_BRA CLOSE_PAR COMMENT COM_BLOCK COND CONS DEFINE DISPLAY DIVIDE DO ELSE EMPTY EQQUES EQUALS FALSE FLOAT GREATER GREATER_EQUAL ID IF INT LAST LESS LESS_EQUAL MINUS MULTIPLY NEQQUES NEW_LINE OPEN_BRA OPEN_PAR READ REMAINDER SPACE STRING TRUEprogram : form\n    form : definition\n         | expression\n    form : definition definitiondefinition : OPEN_PAR DEFINE ID body CLOSE_PAR\n    body : expression\n         | definition\n    \n    expression : constant\n               | if_expression\n               | do_expression\n               | cond_expression\n               | operation\n               | ID\n               | read\n               | display\n               | cons\n               | list_manip\n    if_expression : OPEN_PAR IF comparison_expression expression CLOSE_PARif_expression : OPEN_PAR IF comparison_expression expression expression CLOSE_PARcond_expression : OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PARcond_expression : OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PARdo_expression : OPEN_PAR DO do_condition comparison_expression expression CLOSE_PARdo_condition : OPEN_PAR ID constant operation CLOSE_PARoperation : OPEN_PAR symbol expression expression CLOSE_PARcomparison_expression : OPEN_PAR comparison expression expression CLOSE_PARread : OPEN_PAR READ CLOSE_PARdisplay : OPEN_PAR DISPLAY expression CLOSE_PARcons : OPEN_PAR CONS constant list_expression CLOSE_PARlist_manip : OPEN_PAR list_op list CLOSE_PAR\n    list_expression : list\n                    | constant\n    \n    list_op : CDR\n            | CAR\n            | LAST\n    \n    list : cons\n         | EMPTY\n         | ID\n    \n    symbol : comparison\n           | boolean\n           | ADD\n           | MINUS\n           | DIVIDE\n           | MULTIPLY\n           | REMAINDER\n    \n    boolean : TRUE\n            | FALSE\n    \n    comparison : EQQUES\n               | NEQQUES\n               | EQUALS\n               | GREATER\n               | LESS\n               | GREATER_EQUAL\n               | LESS_EQUAL\n    \n    constant : INT\n             | FLOAT\n             | CHARACTER\n             | STRING\n    '
    
_lr_action_items = {'OPEN_PAR':([0,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24,26,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,55,57,58,60,69,70,72,73,75,79,80,81,83,84,87,88,90,93,95,96,98,99,102,],[5,21,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,51,53,56,56,61,-38,-39,-40,-41,-42,-43,-44,-32,-33,-34,-47,-48,-49,-50,-51,-52,-53,-45,-46,5,56,51,51,56,-26,61,56,56,56,56,-27,-29,-5,56,-18,91,-24,-28,-19,-22,-25,-23,-20,56,-21,]),'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,26,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,57,58,60,69,70,72,73,75,79,81,83,87,88,90,93,95,98,99,102,],[6,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,50,6,6,65,-38,-39,-40,-41,-42,-43,-44,-32,-33,-34,-47,-48,-49,-50,-51,-52,-53,-45,-46,6,6,71,6,-26,65,6,6,6,6,-27,-29,6,-18,-24,-28,-19,-22,-25,-20,6,-21,]),'INT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,26,28,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,52,57,58,60,69,70,71,72,73,75,79,81,83,87,88,90,93,95,98,99,102,],[16,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,16,16,16,-38,-39,-40,-41,-42,-43,-44,-47,-48,-49,-50,-51,-52,-53,-45,-46,16,16,16,-26,16,16,16,16,16,16,-27,-29,16,-18,-24,-28,-19,-22,-25,-20,16,-21,]),'FLOAT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,26,28,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,52,57,58,60,69,70,71,72,73,75,79,81,83,87,88,90,93,95,98,99,102,],[17,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,17,17,17,-38,-39,-40,-41,-42,-43,-44,-47,-48,-49,-50,-51,-52,-53,-45,-46,17,17,17,-26,17,17,17,17,17,17,-27,-29,17,-18,-24,-28,-19,-22,-25,-20,17,-21,]),'CHARACTER':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,26,28,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,52,57,58,60,69,70,71,72,73,75,79,81,83,87,88,90,93,95,98,99,102,],[18,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,18,18,18,-38,-39,-40,-41,-42,-43,-44,-47,-48,-49,-50,-51,-52,-53,-45,-46,18,18,18,-26,18,18,18,18,18,18,-27,-29,18,-18,-24,-28,-19,-22,-25,-20,18,-21,]),'STRING':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,26,28,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,52,57,58,60,69,70,71,72,73,75,79,81,83,87,88,90,93,95,98,99,102,],[19,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,19,19,19,-38,-39,-40,-41,-42,-43,-44,-47,-48,-49,-50,-51,-52,-53,-45,-46,19,19,19,-26,19,19,19,19,19,19,-27,-29,19,-18,-24,-28,-19,-22,-25,-20,19,-21,]),'$end':([1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,58,75,79,80,83,87,88,90,93,98,102,],[0,-1,-2,-3,-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,-4,-26,-27,-29,-5,-18,-24,-28,-19,-22,-20,-21,]),'DEFINE':([5,21,],[22,22,]),'IF':([5,56,],[23,23,]),'DO':([5,56,],[24,24,]),'COND':([5,56,],[25,25,]),'READ':([5,56,],[27,27,]),'DISPLAY':([5,56,],[28,28,]),'CONS':([5,56,61,],[29,29,29,]),'ADD':([5,56,91,],[33,33,33,]),'MINUS':([5,56,91,],[34,34,34,]),'DIVIDE':([5,56,91,],[35,35,35,]),'MULTIPLY':([5,56,91,],[36,36,36,]),'REMAINDER':([5,56,91,],[37,37,37,]),'CDR':([5,56,],[38,38,]),'CAR':([5,56,],[39,39,]),'LAST':([5,56,],[40,40,]),'EQQUES':([5,51,56,91,],[41,41,41,41,]),'NEQQUES':([5,51,56,91,],[42,42,42,42,]),'EQUALS':([5,51,56,91,],[43,43,43,43,]),'GREATER':([5,51,56,91,],[44,44,44,44,]),'LESS':([5,51,56,91,],[45,45,45,45,]),'GREATER_EQUAL':([5,51,56,91,],[46,46,46,46,]),'LESS_EQUAL':([5,51,56,91,],[47,47,47,47,]),'TRUE':([5,56,91,],[48,48,48,]),'FALSE':([5,56,91,],[49,49,49,]),'CLOSE_PAR':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,27,58,59,62,63,64,65,66,67,68,70,74,75,76,77,78,79,80,82,83,85,87,88,89,90,92,93,94,98,101,102,],[-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,58,-26,75,79,-35,-36,-37,80,-6,-7,83,87,-27,-31,88,-30,-29,-5,90,-18,93,-24,-28,95,-19,96,-22,98,-20,102,-21,]),'CLOSE_BRA':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,58,75,79,83,86,87,88,90,93,98,100,102,],[-13,-8,-9,-10,-11,-12,-14,-15,-16,-17,-54,-55,-56,-57,-26,-27,-29,-18,94,-24,-28,-19,-22,-20,101,-21,]),'EMPTY':([16,17,18,19,30,38,39,40,60,],[-54,-55,-56,-57,64,-32,-33,-34,64,]),'OPEN_BRA':([25,94,],[55,97,]),'ELSE':([97,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'form':([0,],[2,]),'definition':([0,3,50,],[3,20,68,]),'expression':([0,26,28,50,52,57,69,70,72,73,81,99,],[4,57,59,67,70,74,81,82,85,86,89,100,]),'constant':([0,26,28,29,50,52,57,60,69,70,71,72,73,81,99,],[7,7,7,60,7,7,7,76,7,7,84,7,7,7,7,]),'if_expression':([0,26,28,50,52,57,69,70,72,73,81,99,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'do_expression':([0,26,28,50,52,57,69,70,72,73,81,99,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'cond_expression':([0,26,28,50,52,57,69,70,72,73,81,99,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'operation':([0,26,28,50,52,57,69,70,72,73,81,84,99,],[11,11,11,11,11,11,11,11,11,11,11,92,11,]),'read':([0,26,28,50,52,57,69,70,72,73,81,99,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'display':([0,26,28,50,52,57,69,70,72,73,81,99,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'cons':([0,26,28,30,50,52,57,60,69,70,72,73,81,99,],[14,14,14,63,14,14,14,63,14,14,14,14,14,14,]),'list_manip':([0,26,28,50,52,57,69,70,72,73,81,99,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'symbol':([5,56,91,],[26,26,26,]),'list_op':([5,56,],[30,30,]),'comparison':([5,51,56,91,],[31,69,31,31,]),'boolean':([5,56,91,],[32,32,32,]),'comparison_expression':([23,54,55,],[52,72,73,]),'do_condition':([24,],[54,]),'list':([30,60,],[62,78,]),'body':([50,],[66,]),'list_expression':([60,],[77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> form','program',1,'p_program','scheme_compiler.py',126),
  ('form -> definition','form',1,'p_form_a','scheme_compiler.py',132),
  ('form -> expression','form',1,'p_form_a','scheme_compiler.py',133),
  ('form -> definition definition','form',2,'p_form_b','scheme_compiler.py',138),
  ('definition -> OPEN_PAR DEFINE ID body CLOSE_PAR','definition',5,'p_definition','scheme_compiler.py',143),
  ('body -> expression','body',1,'p_body_exp','scheme_compiler.py',148),
  ('body -> definition','body',1,'p_body_exp','scheme_compiler.py',149),
  ('expression -> constant','expression',1,'p_expression','scheme_compiler.py',155),
  ('expression -> if_expression','expression',1,'p_expression','scheme_compiler.py',156),
  ('expression -> do_expression','expression',1,'p_expression','scheme_compiler.py',157),
  ('expression -> cond_expression','expression',1,'p_expression','scheme_compiler.py',158),
  ('expression -> operation','expression',1,'p_expression','scheme_compiler.py',159),
  ('expression -> ID','expression',1,'p_expression','scheme_compiler.py',160),
  ('expression -> read','expression',1,'p_expression','scheme_compiler.py',161),
  ('expression -> display','expression',1,'p_expression','scheme_compiler.py',162),
  ('expression -> cons','expression',1,'p_expression','scheme_compiler.py',163),
  ('expression -> list_manip','expression',1,'p_expression','scheme_compiler.py',164),
  ('if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR','if_expression',5,'p_if_expression_a','scheme_compiler.py',169),
  ('if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR','if_expression',6,'p_if_expression_b','scheme_compiler.py',173),
  ('cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR','cond_expression',7,'p_cond_expression_a','scheme_compiler.py',177),
  ('cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR','cond_expression',11,'p_cond_expression_b','scheme_compiler.py',181),
  ('do_expression -> OPEN_PAR DO do_condition comparison_expression expression CLOSE_PAR','do_expression',6,'p_do_expression','scheme_compiler.py',185),
  ('do_condition -> OPEN_PAR ID constant operation CLOSE_PAR','do_condition',5,'p_do_condition','scheme_compiler.py',189),
  ('operation -> OPEN_PAR symbol expression expression CLOSE_PAR','operation',5,'p_operation','scheme_compiler.py',193),
  ('comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR','comparison_expression',5,'p_comparison_expression','scheme_compiler.py',197),
  ('read -> OPEN_PAR READ CLOSE_PAR','read',3,'p_read','scheme_compiler.py',201),
  ('display -> OPEN_PAR DISPLAY expression CLOSE_PAR','display',4,'p_display','scheme_compiler.py',205),
  ('cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR','cons',5,'p_cons','scheme_compiler.py',209),
  ('list_manip -> OPEN_PAR list_op list CLOSE_PAR','list_manip',4,'p_list_manip','scheme_compiler.py',213),
  ('list_expression -> list','list_expression',1,'p_list_expression','scheme_compiler.py',218),
  ('list_expression -> constant','list_expression',1,'p_list_expression','scheme_compiler.py',219),
  ('list_op -> CDR','list_op',1,'p_list_op','scheme_compiler.py',225),
  ('list_op -> CAR','list_op',1,'p_list_op','scheme_compiler.py',226),
  ('list_op -> LAST','list_op',1,'p_list_op','scheme_compiler.py',227),
  ('list -> cons','list',1,'p_list','scheme_compiler.py',233),
  ('list -> EMPTY','list',1,'p_list','scheme_compiler.py',234),
  ('list -> ID','list',1,'p_list','scheme_compiler.py',235),
  ('symbol -> comparison','symbol',1,'p_symbol','scheme_compiler.py',241),
  ('symbol -> boolean','symbol',1,'p_symbol','scheme_compiler.py',242),
  ('symbol -> ADD','symbol',1,'p_symbol','scheme_compiler.py',243),
  ('symbol -> MINUS','symbol',1,'p_symbol','scheme_compiler.py',244),
  ('symbol -> DIVIDE','symbol',1,'p_symbol','scheme_compiler.py',245),
  ('symbol -> MULTIPLY','symbol',1,'p_symbol','scheme_compiler.py',246),
  ('symbol -> REMAINDER','symbol',1,'p_symbol','scheme_compiler.py',247),
  ('boolean -> TRUE','boolean',1,'p_boolean','scheme_compiler.py',253),
  ('boolean -> FALSE','boolean',1,'p_boolean','scheme_compiler.py',254),
  ('comparison -> EQQUES','comparison',1,'p_comparison','scheme_compiler.py',260),
  ('comparison -> NEQQUES','comparison',1,'p_comparison','scheme_compiler.py',261),
  ('comparison -> EQUALS','comparison',1,'p_comparison','scheme_compiler.py',262),
  ('comparison -> GREATER','comparison',1,'p_comparison','scheme_compiler.py',263),
  ('comparison -> LESS','comparison',1,'p_comparison','scheme_compiler.py',264),
  ('comparison -> GREATER_EQUAL','comparison',1,'p_comparison','scheme_compiler.py',265),
  ('comparison -> LESS_EQUAL','comparison',1,'p_comparison','scheme_compiler.py',266),
  ('constant -> INT','constant',1,'p_constant','scheme_compiler.py',272),
  ('constant -> FLOAT','constant',1,'p_constant','scheme_compiler.py',273),
  ('constant -> CHARACTER','constant',1,'p_constant','scheme_compiler.py',274),
  ('constant -> STRING','constant',1,'p_constant','scheme_compiler.py',275),
]

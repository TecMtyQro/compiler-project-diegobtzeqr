
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'SLR'

_lr_signature = 'ADD CAR CDR CHARACTER CLOSE_BRA CLOSE_PAR COMMENT COM_BLOCK COND CONS DEFINE DISPLAY DIVIDE DO ELSE EMPTY EQQUES EQUALS FALSE FLOAT GREATER GREATER_EQUAL ID IF INT LAST LESS LESS_EQUAL MINUS MULTIPLY NEQQUES NEW_LINE OPEN_BRA OPEN_PAR READ REMAINDER SPACE STRING TRUEprogram : form\n    form : definition\n         | expression\n    form : definition definitiondefinition : OPEN_PAR DEFINE ID body CLOSE_PAR\n    body : expression\n         | definition\n    \n    expression : constant\n               | if_expression\n               | do_expression\n               | cond_expression\n               | comparison_expression\n               | operation\n               | ID\n               | read\n               | display\n               | cons\n               | list_manip\n    if_expression : OPEN_PAR IF comparison_expression expression CLOSE_PARif_expression : OPEN_PAR IF comparison_expression expression expression CLOSE_PARcond_expression : OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PARcond_expression : OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PARdo_expression : OPEN_PAR DO id_set operation comparison_expression expression CLOSE_PARid_set : OPEN_PAR ID constant CLOSE_PARoperation : OPEN_PAR symbol expression expression CLOSE_PARcomparison_expression : OPEN_PAR comparison expression expression CLOSE_PARread : READread : OPEN_PAR READ CLOSE_PARdisplay : OPEN_PAR DISPLAY expression CLOSE_PARcons : OPEN_PAR CONS constant list_expression CLOSE_PARlist_manip : OPEN_PAR list_op list CLOSE_PAR\n    list_expression : list\n                    | constant\n    \n    list_op : CDR\n            | CAR\n            | LAST\n    \n    list : cons\n         | list_manip\n         | EMPTY\n         | ID\n    \n    symbol : ADD\n           | MINUS\n           | DIVIDE\n           | MULTIPLY\n           | REMAINDER\n    \n    boolean : TRUE\n            | FALSE\n    \n    comparison : EQQUES\n               | NEQQUES\n               | EQUALS\n               | GREATER\n               | LESS\n               | GREATER_EQUAL\n               | LESS_EQUAL\n    \n    constant : INT\n             | FLOAT\n             | CHARACTER\n             | STRING\n             | boolean\n    '
    
_lr_action_items = {'OPEN_PAR':([0,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56,57,59,60,61,63,73,76,77,80,84,85,87,89,91,92,93,94,95,98,100,101,104,],[5,26,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,53,55,58,58,58,64,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,-34,-35,-36,5,58,75,53,58,58,-28,64,58,53,58,-29,-31,-5,-19,58,-26,-25,-30,-20,-24,-23,-21,58,-22,]),'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,31,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,59,60,61,63,73,77,80,84,87,89,91,92,93,94,98,100,101,104,],[6,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,52,6,6,6,69,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,-34,-35,-36,6,6,74,6,6,-28,69,6,6,-29,-31,-19,6,-26,-25,-30,-20,-23,-21,6,-22,]),'INT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[17,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,17,17,17,17,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,17,17,17,17,-28,17,17,17,17,-29,-31,-19,17,-26,-25,-30,-20,-23,-21,17,-22,]),'FLOAT':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[18,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,18,18,18,18,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,18,18,18,18,-28,18,18,18,18,-29,-31,-19,18,-26,-25,-30,-20,-23,-21,18,-22,]),'CHARACTER':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[19,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,19,19,19,19,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,19,19,19,19,-28,19,19,19,19,-29,-31,-19,19,-26,-25,-30,-20,-23,-21,19,-22,]),'STRING':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[20,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,20,20,20,20,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,20,20,20,20,-28,20,20,20,20,-29,-31,-19,20,-26,-25,-30,-20,-23,-21,20,-22,]),'READ':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,37,38,39,40,41,42,43,44,45,46,47,48,52,54,58,59,60,61,73,77,80,84,87,89,91,92,93,94,98,100,101,104,],[22,33,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,22,22,22,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,22,22,33,22,22,-28,22,22,-29,-31,-19,22,-26,-25,-30,-20,-23,-21,22,-22,]),'TRUE':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[23,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,23,23,23,23,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,23,23,23,23,-28,23,23,23,23,-29,-31,-19,23,-26,-25,-30,-20,-23,-21,23,-22,]),'FALSE':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,54,59,60,61,63,73,74,77,80,84,87,89,91,92,93,94,98,100,101,104,],[24,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,24,24,24,24,-48,-49,-50,-51,-52,-53,-54,-41,-42,-43,-44,-45,24,24,24,24,-28,24,24,24,24,-29,-31,-19,24,-26,-25,-30,-20,-23,-21,24,-22,]),'$end':([1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,61,80,84,85,87,91,92,93,94,98,100,104,],[0,-1,-2,-3,-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,-4,-28,-29,-31,-5,-19,-26,-25,-30,-20,-23,-21,-22,]),'DEFINE':([5,26,],[27,27,]),'IF':([5,58,],[28,28,]),'DO':([5,58,],[29,29,]),'COND':([5,58,],[30,30,]),'DISPLAY':([5,58,],[34,34,]),'CONS':([5,58,64,],[35,35,35,]),'EQQUES':([5,53,58,],[37,37,37,]),'NEQQUES':([5,53,58,],[38,38,38,]),'EQUALS':([5,53,58,],[39,39,39,]),'GREATER':([5,53,58,],[40,40,40,]),'LESS':([5,53,58,],[41,41,41,]),'GREATER_EQUAL':([5,53,58,],[42,42,42,]),'LESS_EQUAL':([5,53,58,],[43,43,43,]),'ADD':([5,58,75,],[44,44,44,]),'MINUS':([5,58,75,],[45,45,45,]),'DIVIDE':([5,58,75,],[46,46,46,]),'MULTIPLY':([5,58,75,],[47,47,47,]),'REMAINDER':([5,58,75,],[48,48,48,]),'CDR':([5,58,64,],[49,49,49,]),'CAR':([5,58,64,],[50,50,50,]),'LAST':([5,58,64,],[51,51,51,]),'CLOSE_PAR':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,33,61,62,65,66,67,68,69,70,71,72,73,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,96,97,98,100,103,104,],[-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,61,-28,80,84,-37,-38,-39,-40,85,-6,-7,87,91,92,-29,-33,93,-32,-31,-5,94,-19,95,-26,-25,-30,-20,98,100,-23,-21,104,-22,]),'CLOSE_BRA':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,61,80,84,87,90,91,92,93,94,98,100,102,104,],[-14,-8,-9,-10,-11,-12,-13,-15,-16,-17,-18,-55,-56,-57,-58,-59,-27,-46,-47,-28,-29,-31,-19,97,-26,-25,-30,-20,-23,-21,103,-22,]),'EMPTY':([17,18,19,20,21,23,24,36,49,50,51,63,],[-55,-56,-57,-58,-59,-46,-47,68,-34,-35,-36,68,]),'OPEN_BRA':([30,97,],[57,99,]),'ELSE':([99,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'form':([0,],[2,]),'definition':([0,3,52,],[3,25,72,]),'expression':([0,31,32,34,52,54,59,60,73,77,89,101,],[4,59,60,62,71,73,78,79,86,90,96,102,]),'constant':([0,31,32,34,35,52,54,59,60,63,73,74,77,89,101,],[7,7,7,7,63,7,7,7,7,81,7,88,7,7,7,]),'if_expression':([0,31,32,34,52,54,59,60,73,77,89,101,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'do_expression':([0,31,32,34,52,54,59,60,73,77,89,101,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'cond_expression':([0,31,32,34,52,54,59,60,73,77,89,101,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'comparison_expression':([0,28,31,32,34,52,54,57,59,60,73,76,77,89,101,],[11,54,11,11,11,11,11,77,11,11,11,89,11,11,11,]),'operation':([0,31,32,34,52,54,56,59,60,73,77,89,101,],[12,12,12,12,12,12,76,12,12,12,12,12,12,]),'read':([0,31,32,34,52,54,59,60,73,77,89,101,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'display':([0,31,32,34,52,54,59,60,73,77,89,101,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'cons':([0,31,32,34,36,52,54,59,60,63,73,77,89,101,],[15,15,15,15,66,15,15,15,15,66,15,15,15,15,]),'list_manip':([0,31,32,34,36,52,54,59,60,63,73,77,89,101,],[16,16,16,16,67,16,16,16,16,67,16,16,16,16,]),'boolean':([0,31,32,34,35,52,54,59,60,63,73,74,77,89,101,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison':([5,53,58,],[31,31,31,]),'symbol':([5,58,75,],[32,32,32,]),'list_op':([5,58,64,],[36,36,36,]),'id_set':([29,],[56,]),'list':([36,63,],[65,83,]),'body':([52,],[70,]),'list_expression':([63,],[82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> form','program',1,'p_program','scheme_compiler.py',479),
  ('form -> definition','form',1,'p_form_a','scheme_compiler.py',486),
  ('form -> expression','form',1,'p_form_a','scheme_compiler.py',487),
  ('form -> definition definition','form',2,'p_form_b','scheme_compiler.py',492),
  ('definition -> OPEN_PAR DEFINE ID body CLOSE_PAR','definition',5,'p_definition','scheme_compiler.py',497),
  ('body -> expression','body',1,'p_body_exp','scheme_compiler.py',502),
  ('body -> definition','body',1,'p_body_exp','scheme_compiler.py',503),
  ('expression -> constant','expression',1,'p_expression','scheme_compiler.py',509),
  ('expression -> if_expression','expression',1,'p_expression','scheme_compiler.py',510),
  ('expression -> do_expression','expression',1,'p_expression','scheme_compiler.py',511),
  ('expression -> cond_expression','expression',1,'p_expression','scheme_compiler.py',512),
  ('expression -> comparison_expression','expression',1,'p_expression','scheme_compiler.py',513),
  ('expression -> operation','expression',1,'p_expression','scheme_compiler.py',514),
  ('expression -> ID','expression',1,'p_expression','scheme_compiler.py',515),
  ('expression -> read','expression',1,'p_expression','scheme_compiler.py',516),
  ('expression -> display','expression',1,'p_expression','scheme_compiler.py',517),
  ('expression -> cons','expression',1,'p_expression','scheme_compiler.py',518),
  ('expression -> list_manip','expression',1,'p_expression','scheme_compiler.py',519),
  ('if_expression -> OPEN_PAR IF comparison_expression expression CLOSE_PAR','if_expression',5,'p_if_expression_a','scheme_compiler.py',524),
  ('if_expression -> OPEN_PAR IF comparison_expression expression expression CLOSE_PAR','if_expression',6,'p_if_expression_b','scheme_compiler.py',528),
  ('cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA CLOSE_PAR','cond_expression',7,'p_cond_expression_a','scheme_compiler.py',533),
  ('cond_expression -> OPEN_PAR COND OPEN_BRA comparison_expression expression CLOSE_BRA OPEN_BRA ELSE expression CLOSE_BRA CLOSE_PAR','cond_expression',11,'p_cond_expression_b','scheme_compiler.py',537),
  ('do_expression -> OPEN_PAR DO id_set operation comparison_expression expression CLOSE_PAR','do_expression',7,'p_do_expression','scheme_compiler.py',541),
  ('id_set -> OPEN_PAR ID constant CLOSE_PAR','id_set',4,'p_id_set','scheme_compiler.py',545),
  ('operation -> OPEN_PAR symbol expression expression CLOSE_PAR','operation',5,'p_operation','scheme_compiler.py',551),
  ('comparison_expression -> OPEN_PAR comparison expression expression CLOSE_PAR','comparison_expression',5,'p_comparison_expression','scheme_compiler.py',555),
  ('read -> READ','read',1,'p_read_a','scheme_compiler.py',559),
  ('read -> OPEN_PAR READ CLOSE_PAR','read',3,'p_read_b','scheme_compiler.py',563),
  ('display -> OPEN_PAR DISPLAY expression CLOSE_PAR','display',4,'p_display','scheme_compiler.py',567),
  ('cons -> OPEN_PAR CONS constant list_expression CLOSE_PAR','cons',5,'p_cons','scheme_compiler.py',571),
  ('list_manip -> OPEN_PAR list_op list CLOSE_PAR','list_manip',4,'p_list_manip','scheme_compiler.py',575),
  ('list_expression -> list','list_expression',1,'p_list_expression','scheme_compiler.py',580),
  ('list_expression -> constant','list_expression',1,'p_list_expression','scheme_compiler.py',581),
  ('list_op -> CDR','list_op',1,'p_list_op','scheme_compiler.py',587),
  ('list_op -> CAR','list_op',1,'p_list_op','scheme_compiler.py',588),
  ('list_op -> LAST','list_op',1,'p_list_op','scheme_compiler.py',589),
  ('list -> cons','list',1,'p_list','scheme_compiler.py',595),
  ('list -> list_manip','list',1,'p_list','scheme_compiler.py',596),
  ('list -> EMPTY','list',1,'p_list','scheme_compiler.py',597),
  ('list -> ID','list',1,'p_list','scheme_compiler.py',598),
  ('symbol -> ADD','symbol',1,'p_symbol','scheme_compiler.py',604),
  ('symbol -> MINUS','symbol',1,'p_symbol','scheme_compiler.py',605),
  ('symbol -> DIVIDE','symbol',1,'p_symbol','scheme_compiler.py',606),
  ('symbol -> MULTIPLY','symbol',1,'p_symbol','scheme_compiler.py',607),
  ('symbol -> REMAINDER','symbol',1,'p_symbol','scheme_compiler.py',608),
  ('boolean -> TRUE','boolean',1,'p_boolean','scheme_compiler.py',614),
  ('boolean -> FALSE','boolean',1,'p_boolean','scheme_compiler.py',615),
  ('comparison -> EQQUES','comparison',1,'p_comparison','scheme_compiler.py',624),
  ('comparison -> NEQQUES','comparison',1,'p_comparison','scheme_compiler.py',625),
  ('comparison -> EQUALS','comparison',1,'p_comparison','scheme_compiler.py',626),
  ('comparison -> GREATER','comparison',1,'p_comparison','scheme_compiler.py',627),
  ('comparison -> LESS','comparison',1,'p_comparison','scheme_compiler.py',628),
  ('comparison -> GREATER_EQUAL','comparison',1,'p_comparison','scheme_compiler.py',629),
  ('comparison -> LESS_EQUAL','comparison',1,'p_comparison','scheme_compiler.py',630),
  ('constant -> INT','constant',1,'p_constant','scheme_compiler.py',636),
  ('constant -> FLOAT','constant',1,'p_constant','scheme_compiler.py',637),
  ('constant -> CHARACTER','constant',1,'p_constant','scheme_compiler.py',638),
  ('constant -> STRING','constant',1,'p_constant','scheme_compiler.py',639),
  ('constant -> boolean','constant',1,'p_constant','scheme_compiler.py',640),
]
